{"version":3,"sources":["Survey.js","App.js","serviceWorker.js","index.js"],"names":["ranges","value","label","InputAdornments","state","amount","password","weight","weightRange","showPassword","handleChange","prop","event","_this","setState","Object","defineProperty","target","handleClickShowPassword","classes","this","props","react_default","a","createElement","className","root","id","TextField_default","classNames","margin","textField","InputProps","startAdornment","InputAdornment_default","position","select","onChange","map","option","MenuItem_default","key","FormControl_default","fullWidth","InputLabel_default","htmlFor","Input_default","Button_default","variant","button","React","Component","withStyles","theme","display","flexWrap","spacing","unit","withoutLabel","marginTop","flexBasis","App","src_Survey","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fe9a58c.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport './Survey.css'\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing.unit * 3,\r\n  },\r\n  textField: {\r\n    flexBasis: 200,\r\n  },\r\n});\r\n\r\nconst ranges = [\r\n  {\r\n    value: '5',\r\n    label: '5',\r\n  },\r\n  {\r\n    value: '4',\r\n    label: '4',\r\n  },\r\n  {\r\n    value: '3',\r\n    label: '3',\r\n  },\r\n  {\r\n    value: '2',\r\n    label: '2',\r\n  },\r\n  {\r\n    value: '1',\r\n    label: '1',\r\n  },\r\n];\r\n\r\nclass InputAdornments extends React.Component {\r\n  state = {\r\n    amount: '',\r\n    password: '',\r\n    weight: '',\r\n    weightRange: '',\r\n    showPassword: false,\r\n  };\r\n\r\n  handleChange = prop => event => {\r\n    this.setState({ [prop]: event.target.value });\r\n  };\r\n\r\n  handleClickShowPassword = () => {\r\n    this.setState(state => ({ showPassword: !state.showPassword }));\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root} id=\"everything\">\r\n        <TextField\r\n          label=\"Your Name\"\r\n          id=\"simple-start-adornment\"\r\n          className={classNames(classes.margin, classes.textField)}\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">...</InputAdornment>,\r\n          }}\r\n        />\r\n\r\n        <TextField\r\n          select\r\n          label=\"Rating, with 5 being the best\"\r\n          className={classNames(classes.margin, classes.textField)}\r\n          value={this.state.weightRange}\r\n          onChange={this.handleChange('weightRange')}\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\"></InputAdornment>,\r\n          }}\r\n        >\r\n          {ranges.map(option => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.value}\r\n            </MenuItem>\r\n            \r\n          ))}\r\n        </TextField>\r\n        <FormControl fullWidth className={classes.margin}>\r\n          <InputLabel htmlFor=\"adornment-amount\">Overall, were you pleased with your experience with Quality People?</InputLabel>\r\n          <Input\r\n            id=\"adornment-amount\"\r\n            value={this.state.amount}\r\n            onChange={this.handleChange('amount')}\r\n            startAdornment={<InputAdornment position=\"start\">...</InputAdornment>}\r\n          />\r\n        </FormControl>\r\n        <FormControl fullWidth className={classes.margin}>\r\n          <InputLabel htmlFor=\"adornment-amount\">What could we have done better?</InputLabel>\r\n          <Input\r\n            id=\"adornment-amount\"\r\n            value={this.state.amount}\r\n            onChange={this.handleChange('amount')}\r\n            startAdornment={<InputAdornment position=\"start\">...</InputAdornment>}\r\n          />\r\n        </FormControl>\r\n        <Button variant=\"outlined\" className={classes.button}>\r\n          Submit\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nInputAdornments.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(InputAdornments);","import React, { Component } from 'react';\nimport Survey from './Survey.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Survey/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}